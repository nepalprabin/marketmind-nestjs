name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: marketmind-api
  EKS_CLUSTER_NAME: marketmind-cluster

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Save ECR image tag for deploy job
        run: echo ${{ github.sha }} > image-tag.txt
        
      - name: Upload image tag as artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: image-tag.txt

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Download image tag artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tag
      
      - name: Set image tag environment variable
        run: echo "IMAGE_TAG=$(cat image-tag.txt)" >> $GITHUB_ENV
      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      
      - name: Get ECR Repository URL
        run: |
          ECR_REPOSITORY_URL=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY --query 'repositories[0].repositoryUri' --output text)
          echo "ECR_REPOSITORY_URL=$ECR_REPOSITORY_URL" >> $GITHUB_ENV
      
      - name: Get DB credentials from AWS Secrets Manager
        run: |
          SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id marketmind-db-credentials --query SecretString --output text)
          echo "DB_USERNAME=$(echo $SECRET_VALUE | jq -r '.username')" >> $GITHUB_ENV
          echo "DB_PASSWORD=$(echo $SECRET_VALUE | jq -r '.password')" >> $GITHUB_ENV
          echo "DB_HOST=$(echo $SECRET_VALUE | jq -r '.host')" >> $GITHUB_ENV
          echo "DB_PORT=$(echo $SECRET_VALUE | jq -r '.port')" >> $GITHUB_ENV
          echo "DB_NAME=$(echo $SECRET_VALUE | jq -r '.dbname')" >> $GITHUB_ENV
      
      - name: Create Kubernetes namespace
        run: |
          kubectl apply -f kubernetes/namespace.yaml --validate=false
          # Verify namespace exists before continuing
          kubectl get namespace marketmind || exit 1
      
      - name: Create Kubernetes secrets
        run: |
          kubectl create secret generic db-credentials \
            --namespace=marketmind \
            --from-literal=username=${{ env.DB_USERNAME }} \
            --from-literal=password=${{ env.DB_PASSWORD }} \
            --from-literal=host=${{ env.DB_HOST }} \
            --from-literal=port=${{ env.DB_PORT }} \
            --from-literal=dbname=${{ env.DB_NAME }} \
            --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Prepare Kubernetes manifests
        run: |
          # Create directory for processed manifests
          mkdir -p processed-manifests
          
          # Process deployment file with variable substitution
          sed -e "s|\${ECR_REPOSITORY_URL}|${{ env.ECR_REPOSITORY_URL }}|g" \
              -e "s|\${IMAGE_TAG}|${{ env.IMAGE_TAG }}|g" \
              kubernetes/deployment.yaml > processed-manifests/deployment.yaml
          
          # Copy other manifests that don't need processing
          cp kubernetes/service.yaml processed-manifests/
          cp kubernetes/ingress.yaml processed-manifests/
      
      - name: Deploy to Kubernetes
        run: |
          # Apply Kubernetes manifests in the correct order
          kubectl apply -f processed-manifests/deployment.yaml
          kubectl apply -f processed-manifests/service.yaml
          kubectl apply -f processed-manifests/ingress.yaml
      
      - name: Verify deployment
        run: |
          # Wait for deployment to complete successfully
          kubectl rollout status deployment/marketmind-api -n marketmind --timeout=300s
          
          # Get deployment status
          DEPLOYMENT_STATUS=$(kubectl get deployment/marketmind-api -n marketmind -o jsonpath='{.status.conditions[?(@.type=="Available")].status}')
          
          if [ "$DEPLOYMENT_STATUS" != "True" ]; then
            echo "Deployment failed to reach Available status"
            kubectl describe deployment/marketmind-api -n marketmind
            exit 1
          fi
          
          echo "Deployment completed successfully!"